import os;
import re;

class Type:
    objectPattern = r"sap.tm.trp.[a-zA-Z1-9._-]*::[a-zA-Z1-9_-]*";
    #file - is the fullfile path
    def __init__(self,file):
        self.fullPath = file; #full file path as id
        (filePath, fileName) = os.path.split(file);
        (shortName, extension) = os.path.split(fileName);
        self.type = self.extractType(extension);
        self.name = self.extractName(file);
        self.id = "".join([self.name,self.type]);
        self.content = "";
        self.whereUsed = [];
        self.noneExsitDependencies = [];
        self.dependencies = self.getDependencies();
    @staticmethod
    def extractType(file):
        result = re.search(r"\.[a-zA-Z]{1,30}$", file);
        return result.group();
        
    @staticmethod
    def extractName(file):
        match = re.search(r"sap\\tm\\.*",file)
        fileName = match.group(0);
        dirs = fileName.split("\\");
        name = dirs.pop();
        prefix = ".".join(dirs);
        #aabce.cacluview =>aabce
        name = re.sub(r"\.[a-zA-Z]{1,30}$","",name);
        hanaObjectName ="::".join( [prefix,name])
        return hanaObjectName

    def addWhereUsed(self,fileId):
        self.whereUsed.append(fileId)

    def getWhereUsedCount(self):
        return len(self.whereUsed);

    def addDependency(fileId):
        self.dependencies.append(fileId);

    def addNoneExistDependencies(self,fileId):
        self.noneExsitDependencies.append(fileId);

    def toJson(self):
        return {
            "name": self.name,
            "type": self.type,
            "whereUsedList": self.whereUsed,
            "dependencies": self.dependencies,
            "nonExistsDependencies": self.noneExsitDependencies
        };

    def getDependencies(self):
        dependencies = []
        with open(self.fullPath,'r') as f:
            for line in f:
                dependencies.extend(re.findall(self.objectPattern, line))
        dependencies = self._uniqueList(dependencies);
        if self.name in dependencies:
            dependencies.remove(self.name);
        return dependencies;
    
    @staticmethod
    def _uniqueList(list):
        seen = set();
        return [x for x in list if x not in seen and not seen.add(x)];
        


if __name__ == '__main__':
    file = r'C:\Project\rail\hana_trp\hana_trp\hana_trp\trp-backend\sap\tm\trp\db\alert\alert.hdbtable';
    Typee(file);
